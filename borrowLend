def get_goerli_lending_pool(web3):
    lpapaddress = web3.toChecksumAddress("0x5E52dEc931FFb32f609681B8438A51c675cc232d")
    lpap = web3.eth.contract(address=lpapaddress, abi=lending_pool_addresses_provider_abi,)
    lendPool = (lpap.functions.getLendingPool().call())
    return lendPool

def approve_erc20_goerli(erc20_address, spender, amount, privateKey, web3):
    print("Approving ERC20...")
    sw=web3.eth.account.from_key(privateKey)
    account = sw.address
    erc20 = web3.eth.contract(address=erc20_address, abi=erc20_abi)
    function_call = erc20.functions.approve(spender, amount)
    nonce = web3.eth.getTransactionCount(account)
    transaction = function_call.buildTransaction(
        {
            "chainId": 5,
            "from": account,
            "nonce": nonce,
        }
    )
    signed_txn = web3.eth.account.sign_transaction(
        transaction, private_key = privateKey
    )
    tx_hash = web3.eth.send_raw_transaction(signed_txn.rawTransaction)
    #web3.eth.wait_for_transaction_receipt(tx_hash)
    return web3.toHex(tx_hash)

def deposit_to_aave_goerli(privateKey, depositAssetAddress, amount, lending_pool, web3, nonce=None):
    print("Deposit started")
    account=web3.eth.account.from_key(privateKey).address
    lendCon = web3.eth.contract(address=lending_pool,abi=lending_pool_abi)
    nonce = nonce if nonce else web3.eth.getTransactionCount(account)
    tx = lendCon.functions.deposit(depositAssetAddress, amount, account, 0).buildTransaction(
        {
            "chainId": 5,
            "from": account,
            "nonce": nonce,
        }
    )
    signed_txn = web3.eth.account.sign_transaction(
        tx, private_key=privateKey
    )
    tx_hash = web3.eth.send_raw_transaction(signed_txn.rawTransaction)
    return web3.toHex(tx_hash)
